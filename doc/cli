@nestjs/schematics:service --name=modules/holi --dry-run --language="ts" --sourceRoot="src" --spec
{
  binary: 'node',
  args: [
    '"/home/guille/project/tools/nest-cli/node_modules/@angular-devkit/schematics-cli/bin/schematics.js"',
    '@nestjs/schematics:service --name=modules/holi --dry-run --language="ts" --sourceRoot="src" --spec'
  ],
  options: {
    cwd: '/home/guille/project/tools/nest-cli',
    stdio: 'inherit',
    shell: true
  }
}

//lib/runners/abstract.runner.ts
import * as chalk from 'chalk';
import { ChildProcess, spawn, SpawnOptions } from 'child_process';
import { MESSAGES } from '../ui';

export class AbstractRunner {
  constructor(protected binary: string, protected args: string[] = []) {}

  public async run(
    command: string,
    collect = false,
    cwd: string = process.cwd(),
  ): Promise<null | string> {
    const args: string[] = [command];
    const options: SpawnOptions = {
      cwd,
      stdio: collect ? 'pipe' : 'inherit',
      shell: true,
    };
    return new Promise<null | string>((resolve, reject) => {
      const child: ChildProcess = spawn(
        `${this.binary}`,
        [...this.args, ...args],
        options,
      );
      if (collect) {
        child.stdout!.on('data', (data) =>
          resolve(data.toString().replace(/\r\n|\n/, '')),
        );
      }
      child.on('close', (code) => {
        if (code === 0) {
          resolve(null);
        } else {
          console.error(
            chalk.red(
              MESSAGES.RUNNER_EXECUTION_ERROR(`${this.binary} ${command}`),
            ),
          );
          reject();
        }
      });
    });
  }
}



https://github.com/angular/angular-devkit-schematics-cli-builds


    "@angular-devkit/core": "12.1.1",
    "@angular-devkit/schematics": "12.1.1",
    "@angular-devkit/schematics-cli": "12.1.1",
    "@nestjs/schematics": "^8.0.0",